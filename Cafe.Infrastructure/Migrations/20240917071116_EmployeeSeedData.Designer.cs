// <auto-generated />
using System;
using Cafe.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cafe.Infrastructure.Migrations
{
    [DbContext(typeof(RawaanDBContext))]
    [Migration("20240917071116_EmployeeSeedData")]
    partial class EmployeeSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cafe.Domain.Features.Employees.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 2,
                            Name = "Ayman $1",
                            PhoneNumber = "01029045270$1"
                        },
                        new
                        {
                            Id = 2,
                            Age = 4,
                            Name = "Ayman $2",
                            PhoneNumber = "01029045270$2"
                        },
                        new
                        {
                            Id = 3,
                            Age = 6,
                            Name = "Ayman $3",
                            PhoneNumber = "01029045270$3"
                        },
                        new
                        {
                            Id = 4,
                            Age = 8,
                            Name = "Ayman $4",
                            PhoneNumber = "01029045270$4"
                        },
                        new
                        {
                            Id = 5,
                            Age = 10,
                            Name = "Ayman $5",
                            PhoneNumber = "01029045270$5"
                        },
                        new
                        {
                            Id = 6,
                            Age = 12,
                            Name = "Ayman $6",
                            PhoneNumber = "01029045270$6"
                        },
                        new
                        {
                            Id = 7,
                            Age = 14,
                            Name = "Ayman $7",
                            PhoneNumber = "01029045270$7"
                        },
                        new
                        {
                            Id = 8,
                            Age = 16,
                            Name = "Ayman $8",
                            PhoneNumber = "01029045270$8"
                        },
                        new
                        {
                            Id = 9,
                            Age = 18,
                            Name = "Ayman $9",
                            PhoneNumber = "01029045270$9"
                        },
                        new
                        {
                            Id = 10,
                            Age = 20,
                            Name = "Ayman $10",
                            PhoneNumber = "01029045270$10"
                        },
                        new
                        {
                            Id = 11,
                            Age = 22,
                            Name = "Ayman $11",
                            PhoneNumber = "01029045270$11"
                        },
                        new
                        {
                            Id = 12,
                            Age = 24,
                            Name = "Ayman $12",
                            PhoneNumber = "01029045270$12"
                        },
                        new
                        {
                            Id = 13,
                            Age = 26,
                            Name = "Ayman $13",
                            PhoneNumber = "01029045270$13"
                        },
                        new
                        {
                            Id = 14,
                            Age = 28,
                            Name = "Ayman $14",
                            PhoneNumber = "01029045270$14"
                        },
                        new
                        {
                            Id = 15,
                            Age = 30,
                            Name = "Ayman $15",
                            PhoneNumber = "01029045270$15"
                        },
                        new
                        {
                            Id = 16,
                            Age = 32,
                            Name = "Ayman $16",
                            PhoneNumber = "01029045270$16"
                        },
                        new
                        {
                            Id = 17,
                            Age = 34,
                            Name = "Ayman $17",
                            PhoneNumber = "01029045270$17"
                        },
                        new
                        {
                            Id = 18,
                            Age = 36,
                            Name = "Ayman $18",
                            PhoneNumber = "01029045270$18"
                        },
                        new
                        {
                            Id = 19,
                            Age = 38,
                            Name = "Ayman $19",
                            PhoneNumber = "01029045270$19"
                        },
                        new
                        {
                            Id = 20,
                            Age = 40,
                            Name = "Ayman $20",
                            PhoneNumber = "01029045270$20"
                        },
                        new
                        {
                            Id = 21,
                            Age = 42,
                            Name = "Ayman $21",
                            PhoneNumber = "01029045270$21"
                        },
                        new
                        {
                            Id = 22,
                            Age = 44,
                            Name = "Ayman $22",
                            PhoneNumber = "01029045270$22"
                        },
                        new
                        {
                            Id = 23,
                            Age = 46,
                            Name = "Ayman $23",
                            PhoneNumber = "01029045270$23"
                        },
                        new
                        {
                            Id = 24,
                            Age = 48,
                            Name = "Ayman $24",
                            PhoneNumber = "01029045270$24"
                        },
                        new
                        {
                            Id = 25,
                            Age = 50,
                            Name = "Ayman $25",
                            PhoneNumber = "01029045270$25"
                        },
                        new
                        {
                            Id = 26,
                            Age = 52,
                            Name = "Ayman $26",
                            PhoneNumber = "01029045270$26"
                        },
                        new
                        {
                            Id = 27,
                            Age = 54,
                            Name = "Ayman $27",
                            PhoneNumber = "01029045270$27"
                        },
                        new
                        {
                            Id = 28,
                            Age = 56,
                            Name = "Ayman $28",
                            PhoneNumber = "01029045270$28"
                        },
                        new
                        {
                            Id = 29,
                            Age = 58,
                            Name = "Ayman $29",
                            PhoneNumber = "01029045270$29"
                        },
                        new
                        {
                            Id = 30,
                            Age = 60,
                            Name = "Ayman $30",
                            PhoneNumber = "01029045270$30"
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Features.User.RawaanUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cafe.Domain.Features.User.RawaanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cafe.Domain.Features.User.RawaanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Domain.Features.User.RawaanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cafe.Domain.Features.User.RawaanUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
